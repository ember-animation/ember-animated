{"version":3,"file":"adjust-color.js","sources":["../../src/motions/adjust-color.ts"],"sourcesContent":["import { rAF } from '../-private/concurrency-helpers.ts';\nimport Motion, { type BaseOptions } from '../-private/motion.ts';\nimport type Sprite from '../-private/sprite.ts';\nimport { type CopiedCSS } from '../-private/sprite.ts';\nimport { Color, ColorTween } from '../color.ts';\n\nexport default function adjustColor(\n  propertyName: keyof CopiedCSS,\n  sprite: Sprite,\n  opts: Partial<AdjustColorOptions> = {},\n) {\n  return new AdjustColor(propertyName, sprite, opts).run();\n}\n\nadjustColor.property = function (propertyName: keyof CopiedCSS) {\n  return this.bind(null, propertyName);\n};\n\ninterface AdjustColorOptions extends BaseOptions {\n  from: string;\n  to: string;\n  easing: (time: number) => number;\n}\n\nexport class AdjustColor extends Motion<AdjustColorOptions> {\n  colorTween: ColorTween | null = null;\n\n  constructor(\n    readonly propertyName: keyof CopiedCSS,\n    sprite: Sprite,\n    opts: Partial<AdjustColorOptions> = {},\n  ) {\n    super(sprite, opts);\n  }\n\n  *animate() {\n    let from, to;\n\n    if (this.opts.from != null) {\n      // user-provided choice takes precedence\n      from = Color.fromUserProvidedColor(this.opts.from);\n    } else if (this.sprite.initialComputedStyle) {\n      // otherwise our initial color defaults to the measured initial style\n      from = Color.fromComputedStyle(\n        this.sprite.initialComputedStyle[this.propertyName],\n      );\n    } else {\n      // if we don't have a measured initial style, we use the final\n      // style. This makes sense in cases where somebody is animating\n      // an insertedSprite to an explicit color, and they expect the\n      // \"from\" value to just match the way the sprite will\n      // look when it's normal.\n      this.sprite.assertHasFinalBounds();\n      from = Color.fromComputedStyle(\n        this.sprite.finalComputedStyle[this.propertyName],\n      );\n    }\n\n    if (this.opts.to != null) {\n      to = Color.fromUserProvidedColor(this.opts.to);\n    } else if (this.sprite.finalComputedStyle) {\n      to = Color.fromComputedStyle(\n        this.sprite.finalComputedStyle[this.propertyName],\n      );\n    } else {\n      this.sprite.assertHasInitialBounds();\n      to = Color.fromComputedStyle(\n        this.sprite.initialComputedStyle[this.propertyName],\n      );\n    }\n\n    this.colorTween = new ColorTween(from, to, this.duration, this.opts.easing);\n    while (!this.colorTween.done) {\n      this.sprite.applyStyles({\n        [this.propertyName]: this.colorTween.currentValue.toString(),\n      });\n      yield rAF();\n    }\n  }\n}\n"],"names":["adjustColor","propertyName","sprite","opts","AdjustColor","run","property","bind","Motion","constructor","_defineProperty","animate","from","to","Color","fromUserProvidedColor","initialComputedStyle","fromComputedStyle","assertHasFinalBounds","finalComputedStyle","assertHasInitialBounds","colorTween","ColorTween","duration","easing","done","applyStyles","currentValue","toString","rAF"],"mappings":";;;;;;AAMe,SAASA,WAAWA,CACjCC,YAA6B,EAC7BC,MAAc,EACdC,IAAiC,GAAG,EAAE,EACtC;AACA,EAAA,OAAO,IAAIC,WAAW,CAACH,YAAY,EAAEC,MAAM,EAAEC,IAAI,CAAC,CAACE,GAAG,EAAE,CAAA;AAC1D,CAAA;AAEAL,WAAW,CAACM,QAAQ,GAAG,UAAUL,YAA6B,EAAE;AAC9D,EAAA,OAAO,IAAI,CAACM,IAAI,CAAC,IAAI,EAAEN,YAAY,CAAC,CAAA;AACtC,CAAC,CAAA;AAQM,MAAMG,WAAW,SAASI,MAAM,CAAqB;EAG1DC,WAAWA,CACAR,YAA6B,EACtCC,MAAc,EACdC,IAAiC,GAAG,EAAE,EACtC;AACA,IAAA,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC,CAAA;AAACO,IAAAA,eAAA,qBAPU,IAAI,CAAA,CAAA;IAAA,IAGzBT,CAAAA,YAA6B,GAA7BA,YAA6B,CAAA;AAKxC,GAAA;EAEA,CAACU,OAAOA,GAAG;IACT,IAAIC,IAAI,EAAEC,EAAE,CAAA;AAEZ,IAAA,IAAI,IAAI,CAACV,IAAI,CAACS,IAAI,IAAI,IAAI,EAAE;AAC1B;MACAA,IAAI,GAAGE,KAAK,CAACC,qBAAqB,CAAC,IAAI,CAACZ,IAAI,CAACS,IAAI,CAAC,CAAA;AACpD,KAAC,MAAM,IAAI,IAAI,CAACV,MAAM,CAACc,oBAAoB,EAAE;AAC3C;AACAJ,MAAAA,IAAI,GAAGE,KAAK,CAACG,iBAAiB,CAC5B,IAAI,CAACf,MAAM,CAACc,oBAAoB,CAAC,IAAI,CAACf,YAAY,CACpD,CAAC,CAAA;AACH,KAAC,MAAM;AACL;AACA;AACA;AACA;AACA;AACA,MAAA,IAAI,CAACC,MAAM,CAACgB,oBAAoB,EAAE,CAAA;AAClCN,MAAAA,IAAI,GAAGE,KAAK,CAACG,iBAAiB,CAC5B,IAAI,CAACf,MAAM,CAACiB,kBAAkB,CAAC,IAAI,CAAClB,YAAY,CAClD,CAAC,CAAA;AACH,KAAA;AAEA,IAAA,IAAI,IAAI,CAACE,IAAI,CAACU,EAAE,IAAI,IAAI,EAAE;MACxBA,EAAE,GAAGC,KAAK,CAACC,qBAAqB,CAAC,IAAI,CAACZ,IAAI,CAACU,EAAE,CAAC,CAAA;AAChD,KAAC,MAAM,IAAI,IAAI,CAACX,MAAM,CAACiB,kBAAkB,EAAE;AACzCN,MAAAA,EAAE,GAAGC,KAAK,CAACG,iBAAiB,CAC1B,IAAI,CAACf,MAAM,CAACiB,kBAAkB,CAAC,IAAI,CAAClB,YAAY,CAClD,CAAC,CAAA;AACH,KAAC,MAAM;AACL,MAAA,IAAI,CAACC,MAAM,CAACkB,sBAAsB,EAAE,CAAA;AACpCP,MAAAA,EAAE,GAAGC,KAAK,CAACG,iBAAiB,CAC1B,IAAI,CAACf,MAAM,CAACc,oBAAoB,CAAC,IAAI,CAACf,YAAY,CACpD,CAAC,CAAA;AACH,KAAA;AAEA,IAAA,IAAI,CAACoB,UAAU,GAAG,IAAIC,UAAU,CAACV,IAAI,EAAEC,EAAE,EAAE,IAAI,CAACU,QAAQ,EAAE,IAAI,CAACpB,IAAI,CAACqB,MAAM,CAAC,CAAA;AAC3E,IAAA,OAAO,CAAC,IAAI,CAACH,UAAU,CAACI,IAAI,EAAE;AAC5B,MAAA,IAAI,CAACvB,MAAM,CAACwB,WAAW,CAAC;QACtB,CAAC,IAAI,CAACzB,YAAY,GAAG,IAAI,CAACoB,UAAU,CAACM,YAAY,CAACC,QAAQ,EAAC;AAC7D,OAAC,CAAC,CAAA;MACF,MAAMC,GAAG,EAAE,CAAA;AACb,KAAA;AACF,GAAA;AACF;;;;"}