{"version":3,"file":"move.js","sources":["../../src/motions/move.ts"],"sourcesContent":["import { rAF } from '../-private/concurrency-helpers.ts';\nimport Motion, { type BaseOptions } from '../-private/motion.ts';\nimport type Sprite from '../-private/sprite.ts';\nimport Tween, { type TweenLike } from '../-private/tween.ts';\n\n/**\n  Animates _sprite_ from its initial position to its final position.\n\n  _sprite_ must have both `initialBounds` and `finalBounds` set.\n\n  ```js\n  for (let sprite of keptSprites) {\n    move(sprite)\n  }\n  ```\n\n  @function move\n  @export default\n  @param {Sprite} sprite\n  @return {Motion}\n*/\nexport default function move(sprite: Sprite, opts: Partial<MoveOptions> = {}) {\n  return new Move(sprite, opts).run();\n}\n\nexport interface MoveOptions extends BaseOptions {\n  easing: (time: number) => number;\n}\n\nexport class Move<T extends MoveOptions = MoveOptions> extends Motion<T> {\n  prior: Move | undefined | null = null;\n  xTween: TweenLike | null = null;\n  yTween: TweenLike | null = null;\n\n  interrupted(motions: Motion[]) {\n    // We only need to track the prior Move we are replacing here,\n    // because it will have done the same for any earlier ones.\n    // SAFETY: We know this is a Move because we checked the instance type.\n    this.prior = motions.find((m) => m instanceof Move) as Move | undefined;\n  }\n\n  *animate() {\n    let duration = this.duration;\n\n    this.sprite.assertHasInitialBounds();\n    this.sprite.assertHasFinalBounds();\n    let sprite = this.sprite;\n\n    // How far our sprite needs to move.\n    let dx, dy;\n    {\n      let initial = sprite.initialBounds;\n      let final = sprite.finalBounds;\n      dx = final.left - initial.left;\n      dy = final.top - initial.top;\n    }\n\n    if (!this.prior) {\n      // when starting a new move we start from its current position\n      // (sprite.transform) and offset that based on the change in\n      // bounds we want.\n      this.xTween = new Tween(\n        sprite.transform.tx,\n        sprite.transform.tx + dx,\n        fuzzyZero(dx) ? 0 : duration,\n        this.opts.easing,\n      );\n\n      this.yTween = new Tween(\n        sprite.transform.ty,\n        sprite.transform.ty + dy,\n        fuzzyZero(dy) ? 0 : duration,\n        this.opts.easing,\n      );\n    } else {\n      let prior: Move = this.prior;\n      prior.assertHasTweens();\n\n      // Here we are interrupting a prior Move.\n      let priorXTween = prior.xTween;\n      let priorYTween = prior.yTween;\n\n      // The transformDiffs account for the fact that our old and new\n      // tweens may be measuring from different origins.\n      let transformDiffX = sprite.transform.tx - priorXTween.currentValue;\n      let transformDiffY = sprite.transform.ty - priorYTween.currentValue;\n\n      // We adjust our move distances so that they cancel out the\n      // remainder of the previous move.\n      dx -= priorXTween.finalValue - priorXTween.currentValue;\n      dy -= priorYTween.finalValue - priorYTween.currentValue;\n\n      // If our interrupting move is actually going to the same place\n      // we were already going, we don't really want to extend the\n      // time of the overall animation (it looks funny when you're\n      // waiting around for nothing to happen).\n      let durationX = fuzzyZero(dx) ? 0 : duration;\n      let durationY = fuzzyZero(dy) ? 0 : duration;\n\n      // We add our new differential tweens to the prior tweens. This\n      // is the magic that gives us smooth continuity. At the very\n      // start, the old tween will dominate because the new tween\n      // hasn't ramped up its motion yet. As the old tween finishes,\n      // the new tween begins to dominate. Because of the adjustments\n      // we did above, the sum of both tweens will end up right where\n      // we want to be.\n      this.xTween = new Tween(\n        transformDiffX,\n        transformDiffX + dx,\n        durationX,\n        this.opts.easing,\n      ).plus(prior.xTween);\n      this.yTween = new Tween(\n        transformDiffY,\n        transformDiffY + dy,\n        durationY,\n        this.opts.easing,\n      ).plus(prior.yTween);\n    }\n\n    yield* this._moveIt();\n  }\n\n  *_moveIt() {\n    this.assertHasTweens();\n    let sprite = this.sprite;\n    while (!this.xTween.done || !this.yTween.done) {\n      sprite.translate(\n        this.xTween.currentValue - sprite.transform.tx,\n        this.yTween.currentValue - sprite.transform.ty,\n      );\n      yield rAF();\n    }\n  }\n\n  assertHasTweens(): asserts this is MoveWithTweens {\n    if (!this.xTween) {\n      throw new Error(`motion does not have xTween`);\n    }\n    if (!this.yTween) {\n      throw new Error(`motion does not have yTween`);\n    }\n  }\n}\n\ninterface MoveWithTweens extends Move {\n  xTween: TweenLike;\n  yTween: TweenLike;\n}\n\n// Because sitting around while your sprite animates by 3e-15 pixels\n// is no fun.\nfunction fuzzyZero(number: number) {\n  return Math.abs(number) < 0.00001;\n}\n\nexport function continuePrior(sprite: Sprite, opts: Partial<MoveOptions> = {}) {\n  return new ContinuePrior(sprite, opts).run();\n}\n\nexport class ContinuePrior extends Move {\n  *animate() {\n    if (!this.prior) {\n      return;\n    }\n    this.xTween = this.prior.xTween;\n    this.yTween = this.prior.yTween;\n    yield* this._moveIt();\n  }\n}\n"],"names":["move","sprite","opts","Move","run","Motion","prior","xTween","yTween","interrupted","motions","find","m","animate","duration","assertHasInitialBounds","assertHasFinalBounds","dx","dy","initial","initialBounds","final","finalBounds","left","top","Tween","transform","tx","fuzzyZero","easing","ty","assertHasTweens","priorXTween","priorYTween","transformDiffX","currentValue","transformDiffY","finalValue","durationX","durationY","plus","_moveIt","done","translate","rAF","Error","number","Math","abs","continuePrior","ContinuePrior"],"mappings":"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"}