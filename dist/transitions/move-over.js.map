{"version":3,"file":"move-over.js","sources":["../../src/transitions/move-over.ts"],"sourcesContent":["import { Move } from '../motions/move.ts';\nimport follow from '../motions/follow.ts';\nimport type Sprite from '../-private/sprite.ts';\nimport type TransitionContext from '../-private/transition-context.ts';\n\nexport const toLeft = moveOver.bind(null, 'x', -1);\nexport const toRight = moveOver.bind(null, 'x', 1);\nexport const toUp = moveOver.bind(null, 'y', -1);\nexport const toDown = moveOver.bind(null, 'y', 1);\n\nfunction normalize(dimension: string, direction: number) {\n  let position;\n  let size;\n  let startTranslatedBy;\n  let endTranslatedBy;\n  if (dimension.toLowerCase() === 'x') {\n    size = (bounds: DOMRect) => bounds.width;\n    if (direction > 0) {\n      position = (bounds: DOMRect) => bounds.left;\n      startTranslatedBy = (sprite: Sprite, distance: number) =>\n        sprite.startTranslatedBy(distance, 0);\n      endTranslatedBy = (sprite: Sprite, distance: number) =>\n        sprite.endTranslatedBy(distance, 0);\n    } else {\n      position = (bounds: DOMRect) => -bounds.right;\n      startTranslatedBy = (sprite: Sprite, distance: number) =>\n        sprite.startTranslatedBy(-distance, 0);\n      endTranslatedBy = (sprite: Sprite, distance: number) =>\n        sprite.endTranslatedBy(-distance, 0);\n    }\n  } else {\n    size = (bounds: DOMRect) => bounds.height;\n    if (direction > 0) {\n      position = (bounds: DOMRect) => bounds.top;\n      startTranslatedBy = (sprite: Sprite, distance: number) =>\n        sprite.startTranslatedBy(0, distance);\n      endTranslatedBy = (sprite: Sprite, distance: number) =>\n        sprite.endTranslatedBy(0, distance);\n    } else {\n      position = (bounds: DOMRect) => -bounds.bottom;\n      startTranslatedBy = (sprite: Sprite, distance: number) =>\n        sprite.startTranslatedBy(0, -distance);\n      endTranslatedBy = (sprite: Sprite, distance: number) =>\n        sprite.endTranslatedBy(0, -distance);\n    }\n  }\n  return { position, size, startTranslatedBy, endTranslatedBy };\n}\n\n// eslint-disable-next-line require-yield\nexport default function* moveOver(\n  dimension: string,\n  direction: number,\n  context: TransitionContext,\n) {\n  let { position, size, startTranslatedBy, endTranslatedBy } = normalize(\n    dimension,\n    direction,\n  );\n\n  let viewport: DOMRect | null;\n  if (context.insertedSprites[0]) {\n    viewport = context.insertedSprites[0].finalBounds;\n  } else if (context.keptSprites[0]) {\n    viewport = context.keptSprites[0].finalBounds;\n  } else {\n    throw new Error('Unimplemented');\n  }\n\n  if (context.insertedSprites[0]) {\n    // Offset is how far out of place we're going to start the inserted sprite.\n    let offset = 0;\n\n    // if any leaving sprites still hang outside the viewport to the\n    // left, they add to our offset because the new sprite will be to\n    // their left.\n    context.removedSprites.forEach((sprite: Sprite) => {\n      sprite.assertHasInitialBounds();\n      let o = position(viewport!) - position(sprite.initialBounds);\n      if (o > offset) {\n        offset = o;\n      }\n    });\n\n    // the new sprite's own width adds to our offset because we want its\n    // right edge (not left edge) to start touching the leftmost leaving\n    // sprite (or viewport if no leaving sprites)\n    let firstInserted: Sprite = context.insertedSprites[0];\n    firstInserted.assertHasFinalBounds();\n    offset += size(firstInserted.finalBounds);\n\n    startTranslatedBy(firstInserted, -offset);\n\n    if (context.removedSprites[0]) {\n      endTranslatedBy(context.removedSprites[0], offset);\n      let move = new Move(context.removedSprites[0]);\n      move.run();\n      for (const removedSprite of context.removedSprites) {\n        follow(removedSprite, { source: move });\n      }\n      follow(firstInserted, { source: move });\n    } else {\n      new Move(firstInserted).run();\n    }\n  } else if (context.keptSprites[0]) {\n    const move = new Move(context.keptSprites[0]);\n    move.run();\n    context.removedSprites.forEach((sprite) => {\n      follow(sprite, { source: move });\n    });\n  } else {\n    throw new Error('Unimplemented2');\n  }\n}\n"],"names":["toLeft","moveOver","bind","toRight","toUp","toDown","normalize","dimension","direction","position","size","startTranslatedBy","endTranslatedBy","toLowerCase","bounds","width","left","sprite","distance","right","height","top","bottom","context","viewport","insertedSprites","finalBounds","keptSprites","Error","offset","removedSprites","forEach","assertHasInitialBounds","o","initialBounds","firstInserted","assertHasFinalBounds","move","Move","run","removedSprite","follow","source"],"mappings":";;;AAKaA,MAAAA,MAAM,GAAGC,QAAQ,CAACC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC;AACrCC,MAAAA,OAAO,GAAGF,QAAQ,CAACC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAC;AACrCE,MAAAA,IAAI,GAAGH,QAAQ,CAACC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC;AACnCG,MAAAA,MAAM,GAAGJ,QAAQ,CAACC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAC;AAEjD,SAASI,SAASA,CAACC,SAAiB,EAAEC,SAAiB,EAAE;AACvD,EAAA,IAAIC,QAAQ,CAAA;AACZ,EAAA,IAAIC,IAAI,CAAA;AACR,EAAA,IAAIC,iBAAiB,CAAA;AACrB,EAAA,IAAIC,eAAe,CAAA;AACnB,EAAA,IAAIL,SAAS,CAACM,WAAW,EAAE,KAAK,GAAG,EAAE;AACnCH,IAAAA,IAAI,GAAII,MAAe,IAAKA,MAAM,CAACC,KAAK,CAAA;IACxC,IAAIP,SAAS,GAAG,CAAC,EAAE;AACjBC,MAAAA,QAAQ,GAAIK,MAAe,IAAKA,MAAM,CAACE,IAAI,CAAA;AAC3CL,MAAAA,iBAAiB,GAAGA,CAACM,MAAc,EAAEC,QAAgB,KACnDD,MAAM,CAACN,iBAAiB,CAACO,QAAQ,EAAE,CAAC,CAAC,CAAA;AACvCN,MAAAA,eAAe,GAAGA,CAACK,MAAc,EAAEC,QAAgB,KACjDD,MAAM,CAACL,eAAe,CAACM,QAAQ,EAAE,CAAC,CAAC,CAAA;AACvC,KAAC,MAAM;AACLT,MAAAA,QAAQ,GAAIK,MAAe,IAAK,CAACA,MAAM,CAACK,KAAK,CAAA;AAC7CR,MAAAA,iBAAiB,GAAGA,CAACM,MAAc,EAAEC,QAAgB,KACnDD,MAAM,CAACN,iBAAiB,CAAC,CAACO,QAAQ,EAAE,CAAC,CAAC,CAAA;AACxCN,MAAAA,eAAe,GAAGA,CAACK,MAAc,EAAEC,QAAgB,KACjDD,MAAM,CAACL,eAAe,CAAC,CAACM,QAAQ,EAAE,CAAC,CAAC,CAAA;AACxC,KAAA;AACF,GAAC,MAAM;AACLR,IAAAA,IAAI,GAAII,MAAe,IAAKA,MAAM,CAACM,MAAM,CAAA;IACzC,IAAIZ,SAAS,GAAG,CAAC,EAAE;AACjBC,MAAAA,QAAQ,GAAIK,MAAe,IAAKA,MAAM,CAACO,GAAG,CAAA;AAC1CV,MAAAA,iBAAiB,GAAGA,CAACM,MAAc,EAAEC,QAAgB,KACnDD,MAAM,CAACN,iBAAiB,CAAC,CAAC,EAAEO,QAAQ,CAAC,CAAA;AACvCN,MAAAA,eAAe,GAAGA,CAACK,MAAc,EAAEC,QAAgB,KACjDD,MAAM,CAACL,eAAe,CAAC,CAAC,EAAEM,QAAQ,CAAC,CAAA;AACvC,KAAC,MAAM;AACLT,MAAAA,QAAQ,GAAIK,MAAe,IAAK,CAACA,MAAM,CAACQ,MAAM,CAAA;AAC9CX,MAAAA,iBAAiB,GAAGA,CAACM,MAAc,EAAEC,QAAgB,KACnDD,MAAM,CAACN,iBAAiB,CAAC,CAAC,EAAE,CAACO,QAAQ,CAAC,CAAA;AACxCN,MAAAA,eAAe,GAAGA,CAACK,MAAc,EAAEC,QAAgB,KACjDD,MAAM,CAACL,eAAe,CAAC,CAAC,EAAE,CAACM,QAAQ,CAAC,CAAA;AACxC,KAAA;AACF,GAAA;EACA,OAAO;IAAET,QAAQ;IAAEC,IAAI;IAAEC,iBAAiB;AAAEC,IAAAA,eAAAA;GAAiB,CAAA;AAC/D,CAAA;;AAEA;AACe,UAAUX,QAAQA,CAC/BM,SAAiB,EACjBC,SAAiB,EACjBe,OAA0B,EAC1B;EACA,IAAI;IAAEd,QAAQ;IAAEC,IAAI;IAAEC,iBAAiB;AAAEC,IAAAA,eAAAA;AAAgB,GAAC,GAAGN,SAAS,CACpEC,SAAS,EACTC,SACF,CAAC,CAAA;AAED,EAAA,IAAIgB,QAAwB,CAAA;AAC5B,EAAA,IAAID,OAAO,CAACE,eAAe,CAAC,CAAC,CAAC,EAAE;IAC9BD,QAAQ,GAAGD,OAAO,CAACE,eAAe,CAAC,CAAC,CAAC,CAACC,WAAW,CAAA;GAClD,MAAM,IAAIH,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC,EAAE;IACjCH,QAAQ,GAAGD,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC,CAACD,WAAW,CAAA;AAC/C,GAAC,MAAM;AACL,IAAA,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC,CAAA;AAClC,GAAA;AAEA,EAAA,IAAIL,OAAO,CAACE,eAAe,CAAC,CAAC,CAAC,EAAE;AAC9B;IACA,IAAII,MAAM,GAAG,CAAC,CAAA;;AAEd;AACA;AACA;AACAN,IAAAA,OAAO,CAACO,cAAc,CAACC,OAAO,CAAEd,MAAc,IAAK;MACjDA,MAAM,CAACe,sBAAsB,EAAE,CAAA;AAC/B,MAAA,IAAIC,CAAC,GAAGxB,QAAQ,CAACe,QAAS,CAAC,GAAGf,QAAQ,CAACQ,MAAM,CAACiB,aAAa,CAAC,CAAA;MAC5D,IAAID,CAAC,GAAGJ,MAAM,EAAE;AACdA,QAAAA,MAAM,GAAGI,CAAC,CAAA;AACZ,OAAA;AACF,KAAC,CAAC,CAAA;;AAEF;AACA;AACA;AACA,IAAA,IAAIE,aAAqB,GAAGZ,OAAO,CAACE,eAAe,CAAC,CAAC,CAAC,CAAA;IACtDU,aAAa,CAACC,oBAAoB,EAAE,CAAA;AACpCP,IAAAA,MAAM,IAAInB,IAAI,CAACyB,aAAa,CAACT,WAAW,CAAC,CAAA;AAEzCf,IAAAA,iBAAiB,CAACwB,aAAa,EAAE,CAACN,MAAM,CAAC,CAAA;AAEzC,IAAA,IAAIN,OAAO,CAACO,cAAc,CAAC,CAAC,CAAC,EAAE;MAC7BlB,eAAe,CAACW,OAAO,CAACO,cAAc,CAAC,CAAC,CAAC,EAAED,MAAM,CAAC,CAAA;MAClD,IAAIQ,IAAI,GAAG,IAAIC,IAAI,CAACf,OAAO,CAACO,cAAc,CAAC,CAAC,CAAC,CAAC,CAAA;MAC9CO,IAAI,CAACE,GAAG,EAAE,CAAA;AACV,MAAA,KAAK,MAAMC,aAAa,IAAIjB,OAAO,CAACO,cAAc,EAAE;QAClDW,MAAM,CAACD,aAAa,EAAE;AAAEE,UAAAA,MAAM,EAAEL,IAAAA;AAAK,SAAC,CAAC,CAAA;AACzC,OAAA;MACAI,MAAM,CAACN,aAAa,EAAE;AAAEO,QAAAA,MAAM,EAAEL,IAAAA;AAAK,OAAC,CAAC,CAAA;AACzC,KAAC,MAAM;AACL,MAAA,IAAIC,IAAI,CAACH,aAAa,CAAC,CAACI,GAAG,EAAE,CAAA;AAC/B,KAAA;GACD,MAAM,IAAIhB,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC,EAAE;IACjC,MAAMU,IAAI,GAAG,IAAIC,IAAI,CAACf,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;IAC7CU,IAAI,CAACE,GAAG,EAAE,CAAA;AACVhB,IAAAA,OAAO,CAACO,cAAc,CAACC,OAAO,CAAEd,MAAM,IAAK;MACzCwB,MAAM,CAACxB,MAAM,EAAE;AAAEyB,QAAAA,MAAM,EAAEL,IAAAA;AAAK,OAAC,CAAC,CAAA;AAClC,KAAC,CAAC,CAAA;AACJ,GAAC,MAAM;AACL,IAAA,MAAM,IAAIT,KAAK,CAAC,gBAAgB,CAAC,CAAA;AACnC,GAAA;AACF;;;;"}